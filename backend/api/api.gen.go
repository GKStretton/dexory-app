// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ComparisonReportStatus.
const (
	EmptyAsExpected                        ComparisonReportStatus = "Empty, as expected"
	EmptyButItShouldHaveBeenOccupied       ComparisonReportStatus = "Empty, but it should have been occupied"
	OccupiedButNoBarcodeCouldBeIdentified  ComparisonReportStatus = "Occupied, but no barcode could be identified"
	OccupiedByAnItemButShouldHaveBeenEmpty ComparisonReportStatus = "Occupied by an item, but should have been empty"
	OccupiedByTheExpectedItems             ComparisonReportStatus = "Occupied by the expected items"
	OccupiedByTheWrongItems                ComparisonReportStatus = "Occupied by the wrong items"
)

// ComparisonReport A report comparing a machine report to a user report
type ComparisonReport = []struct {
	// DetectedBarcodes The barcodes that were actually found in this location
	DetectedBarcodes []string `json:"detected_barcodes"`

	// ExpectedBarcodes The barcodes that were expected to be found in this location
	ExpectedBarcodes []string `json:"expected_barcodes"`

	// Name The name of the location
	Name string `json:"name"`

	// Occupied Whether or not the location was occupied
	Occupied bool `json:"occupied"`

	// Scanned Whether or not the location was successfully scanned
	Scanned bool `json:"scanned"`

	// Status The status resulting from the comparison
	Status ComparisonReportStatus `json:"status"`
}

// ComparisonReportStatus The status resulting from the comparison
type ComparisonReportStatus string

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Message string `json:"message"`
}

// LocationScan Information about a specific location scanned by a machine
type LocationScan struct {
	// DetectedBarcodes List of detected barcodes in this location
	DetectedBarcodes []string `json:"detected_barcodes"`

	// Name Name of the location
	Name string `json:"name"`

	// Occupied Indicates if the location is occupied
	Occupied bool `json:"occupied"`

	// Scanned Indicates if the location was scanned
	Scanned bool `json:"scanned"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorMessage

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorMessage

// NotFound defines model for NotFound.
type NotFound = ErrorMessage

// PostGenerateComparisonParams defines parameters for PostGenerateComparison.
type PostGenerateComparisonParams struct {
	// MachineReportName The machine report name to compare the user report with
	MachineReportName string `form:"machine-report-name" json:"machine-report-name"`
}

// PostMachineReportsJSONBody defines parameters for PostMachineReports.
type PostMachineReportsJSONBody = []LocationScan

// PostMachineReportsJSONRequestBody defines body for PostMachineReports for application/json ContentType.
type PostMachineReportsJSONRequestBody = PostMachineReportsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostGenerateComparison request with any body
	PostGenerateComparisonWithBody(ctx context.Context, params *PostGenerateComparisonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineReports request
	GetMachineReports(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMachineReports request with any body
	PostMachineReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMachineReports(ctx context.Context, body PostMachineReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostGenerateComparisonWithBody(ctx context.Context, params *PostGenerateComparisonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGenerateComparisonRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineReports(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineReportsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineReports(ctx context.Context, body PostMachineReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineReportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostGenerateComparisonRequestWithBody generates requests for PostGenerateComparison with any type of body
func NewPostGenerateComparisonRequestWithBody(server string, params *PostGenerateComparisonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/generate-comparison")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "machine-report-name", runtime.ParamLocationQuery, params.MachineReportName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMachineReportsRequest generates requests for GetMachineReports
func NewGetMachineReportsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine-reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMachineReportsRequest calls the generic PostMachineReports builder with application/json body
func NewPostMachineReportsRequest(server string, body PostMachineReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMachineReportsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMachineReportsRequestWithBody generates requests for PostMachineReports with any type of body
func NewPostMachineReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine-reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostGenerateComparison request with any body
	PostGenerateComparisonWithBodyWithResponse(ctx context.Context, params *PostGenerateComparisonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGenerateComparisonResponse, error)

	// GetMachineReports request
	GetMachineReportsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineReportsResponse, error)

	// PostMachineReports request with any body
	PostMachineReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMachineReportsResponse, error)

	PostMachineReportsWithResponse(ctx context.Context, body PostMachineReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMachineReportsResponse, error)
}

type PostGenerateComparisonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComparisonReport
	JSON400      *ErrorMessage
	JSON404      *ErrorMessage
	JSON500      *ErrorMessage
}

// Status returns HTTPResponse.Status
func (r PostGenerateComparisonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGenerateComparisonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON500      *ErrorMessage
}

// Status returns HTTPResponse.Status
func (r GetMachineReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMachineReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorMessage
	JSON500      *ErrorMessage
}

// Status returns HTTPResponse.Status
func (r PostMachineReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMachineReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostGenerateComparisonWithBodyWithResponse request with arbitrary body returning *PostGenerateComparisonResponse
func (c *ClientWithResponses) PostGenerateComparisonWithBodyWithResponse(ctx context.Context, params *PostGenerateComparisonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGenerateComparisonResponse, error) {
	rsp, err := c.PostGenerateComparisonWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGenerateComparisonResponse(rsp)
}

// GetMachineReportsWithResponse request returning *GetMachineReportsResponse
func (c *ClientWithResponses) GetMachineReportsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineReportsResponse, error) {
	rsp, err := c.GetMachineReports(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineReportsResponse(rsp)
}

// PostMachineReportsWithBodyWithResponse request with arbitrary body returning *PostMachineReportsResponse
func (c *ClientWithResponses) PostMachineReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMachineReportsResponse, error) {
	rsp, err := c.PostMachineReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineReportsResponse(rsp)
}

func (c *ClientWithResponses) PostMachineReportsWithResponse(ctx context.Context, body PostMachineReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMachineReportsResponse, error) {
	rsp, err := c.PostMachineReports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineReportsResponse(rsp)
}

// ParsePostGenerateComparisonResponse parses an HTTP response from a PostGenerateComparisonWithResponse call
func ParsePostGenerateComparisonResponse(rsp *http.Response) (*PostGenerateComparisonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGenerateComparisonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComparisonReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMachineReportsResponse parses an HTTP response from a GetMachineReportsWithResponse call
func ParseGetMachineReportsResponse(rsp *http.Response) (*GetMachineReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMachineReportsResponse parses an HTTP response from a PostMachineReportsWithResponse call
func ParsePostMachineReportsResponse(rsp *http.Response) (*PostMachineReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMachineReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate comparison from the given machine report name and this user report
	// (POST /generate-comparison)
	PostGenerateComparison(ctx echo.Context, params PostGenerateComparisonParams) error
	// Get the list of machine reports
	// (GET /machine-reports)
	GetMachineReports(ctx echo.Context) error
	// Uploads a new machine report
	// (POST /machine-reports)
	PostMachineReports(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGenerateComparison converts echo context to params.
func (w *ServerInterfaceWrapper) PostGenerateComparison(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGenerateComparisonParams
	// ------------- Required query parameter "machine-report-name" -------------

	err = runtime.BindQueryParameter("form", true, true, "machine-report-name", ctx.QueryParams(), &params.MachineReportName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter machine-report-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGenerateComparison(ctx, params)
	return err
}

// GetMachineReports converts echo context to params.
func (w *ServerInterfaceWrapper) GetMachineReports(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMachineReports(ctx)
	return err
}

// PostMachineReports converts echo context to params.
func (w *ServerInterfaceWrapper) PostMachineReports(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMachineReports(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/generate-comparison", wrapper.PostGenerateComparison)
	router.GET(baseURL+"/machine-reports", wrapper.GetMachineReports)
	router.POST(baseURL+"/machine-reports", wrapper.PostMachineReports)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXb2/bthP+Kgf+fi/V2N26odC7Nu0KY/0TpBv2IgiGM3W2mEmkQh7tGIW/+0BSsmVL",
	"btI06zuLPD53vOfh3fmLkKZujCbNTuRfhCXXGO0ofrzG4pJuPTkOX9JoJh1/YtNUSiIroyc3zuiw5mRJ",
	"NYZf/7e0ELn432QPPUm7bvLWWmM/kHO4JLHdbjNRkJNWNQFL5GKmV1ipAjq/20zMNJPVWH0muyIbAX5g",
	"OMk3uOgcKHrfZuKj4d+M18UPi+SSnPFWEmjDsIiug1F7PKCfm7pBq5zRl9QYG+M5xHgFNu6ATKZ6CQg1",
	"ylJp6rbYAIJ3ZNsFkQnFVEcPjTUNWVZJHQUxSabi7zlaaYpuse/wj5Kg2wUukWFNlgAle6yqTboHKA1c",
	"KgeVSZnru+RNQyIXjkO0IfHtAlqLm/BNd80jo+hOhivP6Sli0VjTuPuwA2YBXFIfeoBopPSNomKI8ldJ",
	"XJIFY6MC+kCwRge7kzvUuTEVoRZRJaj1Y1Cdl5KcW/jAVocy6oGR/Yncpz2w5HzFQXQLa+roS+4kKzJB",
	"2tcivxJv64Y3GaDbMSSybnHuGRSDK42vCihxRTAn0v3bf2p/wnwTfexoTjwODdbW6OXoLuq4nNwOfFII",
	"qXcimWnTaQ1kPDAnUAVpVosQ3/WA9G0mLN16ZQM/V0lDe8Z6khjTejbyCndkBF+Kq+DsfUvqeT/hbSBm",
	"fkOSx/R8UJMG77/eb3z9Sp3h9YjLLrDPEvVQPTO9MLZOcsS58QwIriGpFkruhdrmKjLWlTORfXu1eq8c",
	"h0fame6Lxn9QFT5+d0WY6SK0mhDeIQyox5aD05CxGJx8/9+g4SEPQ1kEPKUXZhjgG7ozdgNNhRyUAdgo",
	"WBgLa7RUGu8I2KL8J+RuL/720KuLmcjEiqxLWNOz6dnzmOKGNDZK5OLns+nZNEgHuYzkTpakySLTs16p",
	"Ci/BpJkoKCwmaFaIXFwYx+/aAwcvrUGLNTFZJ/KrsRJ51IRju2DT1keKVPR6MqwVl0GD4fitJxvKUJKZ",
	"aJGeJctnLRV7dth6ynozyfHTvU7G5Pi1KTZH4w3THU+kWx2ONccQg9kl3FC6FRTIGOk6us8gwKin3iD6",
	"03T6ZIPWYEwaCfjT70EXL5LXMbBddJPejByPvLj/yG523Gbil4f4GJuA4/Dn6xrtRuSiU12vo+677FKt",
	"SI9KDHWRClufjIA8OZRRJGFJI5J/R/whmV62lt9J3UPr6inSniyh7TTU9oTD7Lng6XQNGMnIqRf1wGR8",
	"TdAHLfQBeRqpNzepTN33CJ8PC/K5JQwT2uOeyxOR9WdTGSwcIGhaH90tZSD9fRurvm9oBUwuzqXJSmTC",
	"20rkomRu8skk9MCqNI7zl9OXU7HNjiEurCm8jG1y7lVV3Ivz63Q6Fdvr7b8BAAD//4cQvV59DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
